{"version":3,"sources":["components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","weight","height","age","gender","distance","time","calories","handleInputChange","bind","assertThisInitialized","calculate","e","target","value","name","setState","defineProperty","NaN","isNaN","pace","bmr","mets","preventDefault","console","log","react_default","a","createElement","className","type","onChange","min","max","selected","onClick","id","Math","round","React","Component","App","style","marginTop","components_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40f83b0e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Calculator extends React.Component {\r\n\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            weight: 83,\r\n            height: 175,\r\n            age: 32,\r\n            gender: 'm',\r\n            distance: 0,\r\n            time: 0,\r\n            calories: 0\r\n        };\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.calculate = this.calculate.bind(this);\r\n    }\r\n\r\n    handleInputChange(e) {\r\n        const target = e.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    bmr (weight, height, age, gender) {\r\n        \r\n        // sanity check on the inputs\r\n        if (weight + height + age === NaN) return 0;\r\n\r\n        // calculate Mifflin-St Jeor Equation to give basal metabolic rate\r\n        if (gender === 'm') {\r\n            return (10 * weight) + (6.25 * height) - (5 * age) + 5;\r\n        } else {\r\n            return (10 * weight) + (6.25 * height) - (5 * age) - 161;\r\n        }\r\n            \r\n        \r\n    }\r\n\r\n    pace (distance, time) {\r\n        \r\n        if (isNaN(distance) || isNaN(time)) return 0;\r\n\r\n        // given distance in m and time in minutes, returns pace in km/h\r\n        return ( (distance / time) * 60 ) / 1000;\r\n    }\r\n\r\n    mets (pace, time) {\r\n        \r\n        if (isNaN(pace) || isNaN(time)) return 0;\r\n        \r\n        return (pace - .2) * (time / 60);\r\n    }\r\n\r\n    calories (bmr, mets) {\r\n\r\n        if (isNaN(bmr) || isNaN(mets)) return 0;\r\n\r\n        return bmr * mets / 24;\r\n    }\r\n\r\n    calculate (e) {\r\n        e.preventDefault();\r\n        let pace = this.pace(this.state.distance, this.state.time);\r\n        let mets = this.mets(pace, this.state.time);\r\n        let bmr = this.bmr(this.state.weight, this.state.height, this.state.age, this.state.gender);\r\n        console.log('pace: ', pace, 'mets: ', mets, 'bmr: ', bmr);\r\n        let calories = this.calories(bmr, mets);\r\n        this.setState({\r\n            calories: calories\r\n        });\r\n\r\n    }\r\n\r\n    render () {\r\n        return (\r\n           \r\n                <form className=\"ui form\">\r\n                <div className=\"fields\">\r\n                        <div className=\"field\">\r\n                            <label>Weight (kg)</label>\r\n                            <input\r\n                            type=\"number\"\r\n                            name=\"weight\"\r\n                            value={this.state.weight}\r\n                            onChange={this.handleInputChange}\r\n                            min=\"0\"\r\n                            max=\"300\"\r\n                            className=\"ui input\" />\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label>Height (cm)</label>\r\n                            <input\r\n                            type=\"number\"\r\n                            name=\"height\"\r\n                            value={this.state.height}\r\n                            onChange={this.handleInputChange}\r\n                            min=\"0\"\r\n                            max=\"300\" />\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label>Age</label>\r\n                            <input\r\n                            type=\"number\"\r\n                            name=\"age\"\r\n                            value={this.state.age}\r\n                            onChange={this.handleInputChange}\r\n                            min=\"1\"\r\n                            max=\"150\" />\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label>Gender</label>\r\n                            <select name=\"gender\" onChange={this.handleInputChange}>\r\n                                <option value='m' selected>Male</option>\r\n                                <option value='f'>Female</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"fields\">\r\n                        <div className=\"field\">\r\n                            <label>Distance (m)</label> \r\n                            <input\r\n                            type=\"number\"\r\n                            name=\"distance\"\r\n                            value={this.state.distance}\r\n                            onChange={this.handleInputChange}\r\n                            min=\"0\" />\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label>Time (min)</label>\r\n                            <input\r\n                            type=\"number\"\r\n                            name=\"time\"\r\n                            value={this.state.time}\r\n                            onChange={this.handleInputChange}\r\n                            min=\"0\" />\r\n                        </div>\r\n                    </div>\r\n                        \r\n                    <div className=\"fields\">\r\n                        <div className=\"field\">\r\n                            <button className=\"ui primary button\" onClick={this.calculate}>Calculate</button>\r\n                        </div>\r\n                    </div>\r\n                        \r\n                \r\n                    <div id=\"result\" className=\"ui raised segment\">\r\n                        <h2>{Math.round(this.state.calories)} calories burned</h2>\r\n                    </div>\r\n                </form>\r\n           \r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\r\nimport Calculator from './components/Calculator';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"ui container\" style={{marginTop: '50px'}}>\r\n      <div className=\"ui huge header\">\r\n        Calories Burned Running Calculator\r\n      </div>\r\n      <Calculator/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}